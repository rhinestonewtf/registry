{
  "abi": [
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        { "name": "schemaUID", "type": "bytes32", "internalType": "SchemaUID" },
        { "name": "attester", "type": "address", "internalType": "address" },
        {
          "name": "requests",
          "type": "tuple[]",
          "internalType": "struct AttestationRequest[]",
          "components": [
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "expirationTime",
              "type": "uint48",
              "internalType": "uint48"
            },
            { "name": "data", "type": "bytes", "internalType": "bytes" },
            {
              "name": "moduleTypes",
              "type": "uint256[]",
              "internalType": "ModuleType[]"
            }
          ]
        },
        { "name": "signature", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        { "name": "schemaUID", "type": "bytes32", "internalType": "SchemaUID" },
        { "name": "attester", "type": "address", "internalType": "address" },
        {
          "name": "request",
          "type": "tuple",
          "internalType": "struct AttestationRequest",
          "components": [
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "expirationTime",
              "type": "uint48",
              "internalType": "uint48"
            },
            { "name": "data", "type": "bytes", "internalType": "bytes" },
            {
              "name": "moduleTypes",
              "type": "uint256[]",
              "internalType": "ModuleType[]"
            }
          ]
        },
        { "name": "signature", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        { "name": "schemaUID", "type": "bytes32", "internalType": "SchemaUID" },
        {
          "name": "request",
          "type": "tuple",
          "internalType": "struct AttestationRequest",
          "components": [
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "expirationTime",
              "type": "uint48",
              "internalType": "uint48"
            },
            { "name": "data", "type": "bytes", "internalType": "bytes" },
            {
              "name": "moduleTypes",
              "type": "uint256[]",
              "internalType": "ModuleType[]"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "attest",
      "inputs": [
        { "name": "schemaUID", "type": "bytes32", "internalType": "SchemaUID" },
        {
          "name": "requests",
          "type": "tuple[]",
          "internalType": "struct AttestationRequest[]",
          "components": [
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "expirationTime",
              "type": "uint48",
              "internalType": "uint48"
            },
            { "name": "data", "type": "bytes", "internalType": "bytes" },
            {
              "name": "moduleTypes",
              "type": "uint256[]",
              "internalType": "ModuleType[]"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "calcModuleAddress",
      "inputs": [
        { "name": "salt", "type": "bytes32", "internalType": "bytes32" },
        { "name": "initCode", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "check",
      "inputs": [
        { "name": "module", "type": "address", "internalType": "address" },
        {
          "name": "attesters",
          "type": "address[]",
          "internalType": "address[]"
        },
        { "name": "threshold", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "check",
      "inputs": [
        { "name": "module", "type": "address", "internalType": "address" },
        {
          "name": "moduleType",
          "type": "uint256",
          "internalType": "ModuleType"
        },
        {
          "name": "attesters",
          "type": "address[]",
          "internalType": "address[]"
        },
        { "name": "threshold", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "check",
      "inputs": [
        { "name": "module", "type": "address", "internalType": "address" },
        {
          "name": "moduleType",
          "type": "uint256",
          "internalType": "ModuleType"
        }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "check",
      "inputs": [
        { "name": "module", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkForAccount",
      "inputs": [
        {
          "name": "smartAccount",
          "type": "address",
          "internalType": "address"
        },
        { "name": "module", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "checkForAccount",
      "inputs": [
        {
          "name": "smartAccount",
          "type": "address",
          "internalType": "address"
        },
        { "name": "module", "type": "address", "internalType": "address" },
        {
          "name": "moduleType",
          "type": "uint256",
          "internalType": "ModuleType"
        }
      ],
      "outputs": [],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "deployModule",
      "inputs": [
        { "name": "salt", "type": "bytes32", "internalType": "bytes32" },
        {
          "name": "resolverUID",
          "type": "bytes32",
          "internalType": "ResolverUID"
        },
        { "name": "initCode", "type": "bytes", "internalType": "bytes" },
        { "name": "metadata", "type": "bytes", "internalType": "bytes" },
        { "name": "resolverContext", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [
        {
          "name": "moduleAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "deployViaFactory",
      "inputs": [
        { "name": "factory", "type": "address", "internalType": "address" },
        { "name": "callOnFactory", "type": "bytes", "internalType": "bytes" },
        { "name": "metadata", "type": "bytes", "internalType": "bytes" },
        {
          "name": "resolverUID",
          "type": "bytes32",
          "internalType": "ResolverUID"
        },
        { "name": "resolverContext", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [
        {
          "name": "moduleAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "findAttestation",
      "inputs": [
        { "name": "module", "type": "address", "internalType": "address" },
        { "name": "attester", "type": "address", "internalType": "address" }
      ],
      "outputs": [
        {
          "name": "attestation",
          "type": "tuple",
          "internalType": "struct AttestationRecord",
          "components": [
            { "name": "time", "type": "uint48", "internalType": "uint48" },
            {
              "name": "expirationTime",
              "type": "uint48",
              "internalType": "uint48"
            },
            {
              "name": "revocationTime",
              "type": "uint48",
              "internalType": "uint48"
            },
            {
              "name": "moduleTypes",
              "type": "uint32",
              "internalType": "PackedModuleTypes"
            },
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "dataPointer",
              "type": "address",
              "internalType": "AttestationDataRef"
            },
            {
              "name": "schemaUID",
              "type": "bytes32",
              "internalType": "SchemaUID"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "findAttestations",
      "inputs": [
        { "name": "module", "type": "address", "internalType": "address" },
        {
          "name": "attesters",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [
        {
          "name": "attestations",
          "type": "tuple[]",
          "internalType": "struct AttestationRecord[]",
          "components": [
            { "name": "time", "type": "uint48", "internalType": "uint48" },
            {
              "name": "expirationTime",
              "type": "uint48",
              "internalType": "uint48"
            },
            {
              "name": "revocationTime",
              "type": "uint48",
              "internalType": "uint48"
            },
            {
              "name": "moduleTypes",
              "type": "uint32",
              "internalType": "PackedModuleTypes"
            },
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "attester",
              "type": "address",
              "internalType": "address"
            },
            {
              "name": "dataPointer",
              "type": "address",
              "internalType": "AttestationDataRef"
            },
            {
              "name": "schemaUID",
              "type": "bytes32",
              "internalType": "SchemaUID"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "findModule",
      "inputs": [
        {
          "name": "moduleAddress",
          "type": "address",
          "internalType": "address"
        }
      ],
      "outputs": [
        {
          "name": "moduleRecord",
          "type": "tuple",
          "internalType": "struct ModuleRecord",
          "components": [
            {
              "name": "resolverUID",
              "type": "bytes32",
              "internalType": "ResolverUID"
            },
            { "name": "sender", "type": "address", "internalType": "address" },
            { "name": "metadata", "type": "bytes", "internalType": "bytes" }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "findResolver",
      "inputs": [
        { "name": "uid", "type": "bytes32", "internalType": "ResolverUID" }
      ],
      "outputs": [
        {
          "name": "record",
          "type": "tuple",
          "internalType": "struct ResolverRecord",
          "components": [
            {
              "name": "resolver",
              "type": "address",
              "internalType": "contract IExternalResolver"
            },
            {
              "name": "resolverOwner",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "findSchema",
      "inputs": [
        { "name": "uid", "type": "bytes32", "internalType": "SchemaUID" }
      ],
      "outputs": [
        {
          "name": "record",
          "type": "tuple",
          "internalType": "struct SchemaRecord",
          "components": [
            {
              "name": "registeredAt",
              "type": "uint48",
              "internalType": "uint48"
            },
            {
              "name": "validator",
              "type": "address",
              "internalType": "contract IExternalSchemaValidator"
            },
            { "name": "schema", "type": "string", "internalType": "string" }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "findTrustedAttesters",
      "inputs": [
        { "name": "smartAccount", "type": "address", "internalType": "address" }
      ],
      "outputs": [
        {
          "name": "attesters",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "registerModule",
      "inputs": [
        {
          "name": "resolverUID",
          "type": "bytes32",
          "internalType": "ResolverUID"
        },
        {
          "name": "moduleAddress",
          "type": "address",
          "internalType": "address"
        },
        { "name": "metadata", "type": "bytes", "internalType": "bytes" },
        { "name": "resolverContext", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "registerResolver",
      "inputs": [
        {
          "name": "resolver",
          "type": "address",
          "internalType": "contract IExternalResolver"
        }
      ],
      "outputs": [
        { "name": "uid", "type": "bytes32", "internalType": "ResolverUID" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "registerSchema",
      "inputs": [
        { "name": "schema", "type": "string", "internalType": "string" },
        {
          "name": "validator",
          "type": "address",
          "internalType": "contract IExternalSchemaValidator"
        }
      ],
      "outputs": [
        { "name": "uid", "type": "bytes32", "internalType": "SchemaUID" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "requests",
          "type": "tuple[]",
          "internalType": "struct RevocationRequest[]",
          "components": [
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        { "name": "attester", "type": "address", "internalType": "address" },
        {
          "name": "requests",
          "type": "tuple[]",
          "internalType": "struct RevocationRequest[]",
          "components": [
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        { "name": "signature", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "request",
          "type": "tuple",
          "internalType": "struct RevocationRequest",
          "components": [
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        { "name": "attester", "type": "address", "internalType": "address" },
        {
          "name": "request",
          "type": "tuple",
          "internalType": "struct RevocationRequest",
          "components": [
            {
              "name": "moduleAddress",
              "type": "address",
              "internalType": "address"
            }
          ]
        },
        { "name": "signature", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setResolver",
      "inputs": [
        { "name": "uid", "type": "bytes32", "internalType": "ResolverUID" },
        {
          "name": "resolver",
          "type": "address",
          "internalType": "contract IExternalResolver"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferResolverOwnership",
      "inputs": [
        { "name": "uid", "type": "bytes32", "internalType": "ResolverUID" },
        { "name": "newOwner", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "trustAttesters",
      "inputs": [
        { "name": "threshold", "type": "uint8", "internalType": "uint8" },
        {
          "name": "attesters",
          "type": "address[]",
          "internalType": "address[]"
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "Attested",
      "inputs": [
        {
          "name": "moduleAddress",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "attester",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "schemaUID",
          "type": "bytes32",
          "indexed": false,
          "internalType": "SchemaUID"
        },
        {
          "name": "sstore2Pointer",
          "type": "address",
          "indexed": true,
          "internalType": "AttestationDataRef"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "ModuleRegistration",
      "inputs": [
        {
          "name": "implementation",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "NewResolver",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "indexed": true,
          "internalType": "ResolverUID"
        },
        {
          "name": "resolver",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "NewResolverOwner",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "indexed": true,
          "internalType": "ResolverUID"
        },
        {
          "name": "newOwner",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "NewTrustedAttesters",
      "inputs": [
        {
          "name": "smartAccount",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "Revoked",
      "inputs": [
        {
          "name": "moduleAddress",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "revoker",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        },
        {
          "name": "schema",
          "type": "bytes32",
          "indexed": false,
          "internalType": "SchemaUID"
        }
      ],
      "anonymous": false
    },
    {
      "type": "event",
      "name": "SchemaRegistered",
      "inputs": [
        {
          "name": "uid",
          "type": "bytes32",
          "indexed": true,
          "internalType": "SchemaUID"
        },
        {
          "name": "registerer",
          "type": "address",
          "indexed": true,
          "internalType": "address"
        }
      ],
      "anonymous": false
    },
    { "type": "error", "name": "AccessDenied", "inputs": [] },
    { "type": "error", "name": "AlreadyAttested", "inputs": [] },
    {
      "type": "error",
      "name": "AlreadyRegistered",
      "inputs": [
        { "name": "module", "type": "address", "internalType": "address" }
      ]
    },
    { "type": "error", "name": "AlreadyRevoked", "inputs": [] },
    { "type": "error", "name": "AttestationNotFound", "inputs": [] },
    { "type": "error", "name": "DifferentResolvers", "inputs": [] },
    {
      "type": "error",
      "name": "ExternalError_ModuleRegistration",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ExternalError_ResolveAttestation",
      "inputs": []
    },
    {
      "type": "error",
      "name": "ExternalError_ResolveRevocation",
      "inputs": []
    },
    { "type": "error", "name": "ExternalError_SchemaValidation", "inputs": [] },
    {
      "type": "error",
      "name": "FactoryCallFailed",
      "inputs": [
        { "name": "factory", "type": "address", "internalType": "address" }
      ]
    },
    { "type": "error", "name": "InsufficientAttestations", "inputs": [] },
    { "type": "error", "name": "InvalidAttestation", "inputs": [] },
    { "type": "error", "name": "InvalidDeployment", "inputs": [] },
    { "type": "error", "name": "InvalidExpirationTime", "inputs": [] },
    { "type": "error", "name": "InvalidModuleType", "inputs": [] },
    { "type": "error", "name": "InvalidModuleTypes", "inputs": [] },
    {
      "type": "error",
      "name": "InvalidResolver",
      "inputs": [
        {
          "name": "resolver",
          "type": "address",
          "internalType": "contract IExternalResolver"
        }
      ]
    },
    {
      "type": "error",
      "name": "InvalidResolverUID",
      "inputs": [
        { "name": "uid", "type": "bytes32", "internalType": "ResolverUID" }
      ]
    },
    { "type": "error", "name": "InvalidSchema", "inputs": [] },
    {
      "type": "error",
      "name": "InvalidSchemaValidator",
      "inputs": [
        {
          "name": "validator",
          "type": "address",
          "internalType": "contract IExternalSchemaValidator"
        }
      ]
    },
    { "type": "error", "name": "InvalidSignature", "inputs": [] },
    { "type": "error", "name": "InvalidTrustedAttesterInput", "inputs": [] },
    {
      "type": "error",
      "name": "ModuleAddressIsNotContract",
      "inputs": [
        {
          "name": "moduleAddress",
          "type": "address",
          "internalType": "address"
        }
      ]
    },
    {
      "type": "error",
      "name": "ModuleNotFoundInRegistry",
      "inputs": [
        { "name": "module", "type": "address", "internalType": "address" }
      ]
    },
    { "type": "error", "name": "NoTrustedAttestersFound", "inputs": [] },
    { "type": "error", "name": "ResolverAlreadyExists", "inputs": [] },
    {
      "type": "error",
      "name": "RevokedAttestation",
      "inputs": [
        { "name": "attester", "type": "address", "internalType": "address" }
      ]
    },
    {
      "type": "error",
      "name": "SchemaAlreadyExists",
      "inputs": [
        { "name": "uid", "type": "bytes32", "internalType": "SchemaUID" }
      ]
    }
  ],
  "bytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "deployedBytecode": { "object": "0x", "sourceMap": "", "linkReferences": {} },
  "methodIdentifiers": {
    "attest(bytes32,(address,uint48,bytes,uint256[]))": "945e3641",
    "attest(bytes32,(address,uint48,bytes,uint256[])[])": "b65d1012",
    "attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)": "29757d37",
    "attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)": "04a1f298",
    "calcModuleAddress(bytes32,bytes)": "f095ec1b",
    "check(address)": "c23697a8",
    "check(address,address[],uint256)": "0bb30abc",
    "check(address,uint256)": "96fb7217",
    "check(address,uint256,address[],uint256)": "2ed94467",
    "checkForAccount(address,address)": "4c13560c",
    "checkForAccount(address,address,uint256)": "529562a1",
    "deployModule(bytes32,bytes32,bytes,bytes,bytes)": "03b79c84",
    "deployViaFactory(address,bytes,bytes,bytes32,bytes)": "f190e2b1",
    "findAttestation(address,address)": "d9048624",
    "findAttestations(address,address[])": "2b30c899",
    "findModule(address)": "b6b791a1",
    "findResolver(bytes32)": "71c61a2b",
    "findSchema(bytes32)": "b060cb1e",
    "findTrustedAttesters(address)": "dd0fd278",
    "registerModule(bytes32,address,bytes,bytes)": "88dc678d",
    "registerResolver(address)": "9f3e1b53",
    "registerSchema(string,address)": "1d4d9810",
    "revoke((address))": "77efcab4",
    "revoke((address)[])": "4990a682",
    "revoke(address,(address),bytes)": "8e6ec824",
    "revoke(address,(address)[],bytes)": "4ece78ca",
    "setResolver(bytes32,address)": "1896f70a",
    "transferResolverOwnership(bytes32,address)": "7cb2afd8",
    "trustAttesters(uint8,address[])": "f05c04e1"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyAttested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRevoked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AttestationNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DifferentResolvers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExternalError_ModuleRegistration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExternalError_ResolveAttestation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExternalError_ResolveRevocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExternalError_SchemaValidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"FactoryCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAttestations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAttestation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDeployment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExpirationTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidModuleType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidModuleTypes\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IExternalResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"InvalidResolver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"ResolverUID\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"InvalidResolverUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSchema\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IExternalSchemaValidator\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"InvalidSchemaValidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTrustedAttesterInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"name\":\"ModuleAddressIsNotContract\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleNotFoundInRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTrustedAttestersFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"RevokedAttestation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"SchemaUID\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"SchemaAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"SchemaUID\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"AttestationDataRef\",\"name\":\"sstore2Pointer\",\"type\":\"address\"}],\"name\":\"Attested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ModuleRegistration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"ResolverUID\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"ResolverUID\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewResolverOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"NewTrustedAttesters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"SchemaUID\",\"name\":\"schema\",\"type\":\"bytes32\"}],\"name\":\"Revoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"SchemaUID\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registerer\",\"type\":\"address\"}],\"name\":\"SchemaRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"SchemaUID\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"expirationTime\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"ModuleType[]\",\"name\":\"moduleTypes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AttestationRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SchemaUID\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"expirationTime\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"ModuleType[]\",\"name\":\"moduleTypes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"attest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SchemaUID\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"expirationTime\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"ModuleType[]\",\"name\":\"moduleTypes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AttestationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"attest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SchemaUID\",\"name\":\"schemaUID\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"expirationTime\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"ModuleType[]\",\"name\":\"moduleTypes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AttestationRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"attest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"calcModuleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"ModuleType\",\"name\":\"moduleType\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"ModuleType\",\"name\":\"moduleType\",\"type\":\"uint256\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"checkForAccount\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"ModuleType\",\"name\":\"moduleType\",\"type\":\"uint256\"}],\"name\":\"checkForAccount\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"ResolverUID\",\"name\":\"resolverUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"resolverContext\",\"type\":\"bytes\"}],\"name\":\"deployModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callOnFactory\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"ResolverUID\",\"name\":\"resolverUID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"resolverContext\",\"type\":\"bytes\"}],\"name\":\"deployViaFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"}],\"name\":\"findAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"time\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"expirationTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"revocationTime\",\"type\":\"uint48\"},{\"internalType\":\"PackedModuleTypes\",\"name\":\"moduleTypes\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"AttestationDataRef\",\"name\":\"dataPointer\",\"type\":\"address\"},{\"internalType\":\"SchemaUID\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"internalType\":\"struct AttestationRecord\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"}],\"name\":\"findAttestations\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"time\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"expirationTime\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"revocationTime\",\"type\":\"uint48\"},{\"internalType\":\"PackedModuleTypes\",\"name\":\"moduleTypes\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"AttestationDataRef\",\"name\":\"dataPointer\",\"type\":\"address\"},{\"internalType\":\"SchemaUID\",\"name\":\"schemaUID\",\"type\":\"bytes32\"}],\"internalType\":\"struct AttestationRecord[]\",\"name\":\"attestations\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"name\":\"findModule\",\"outputs\":[{\"components\":[{\"internalType\":\"ResolverUID\",\"name\":\"resolverUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct ModuleRecord\",\"name\":\"moduleRecord\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ResolverUID\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"findResolver\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IExternalResolver\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolverOwner\",\"type\":\"address\"}],\"internalType\":\"struct ResolverRecord\",\"name\":\"record\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SchemaUID\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"findSchema\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"registeredAt\",\"type\":\"uint48\"},{\"internalType\":\"contract IExternalSchemaValidator\",\"name\":\"validator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"}],\"internalType\":\"struct SchemaRecord\",\"name\":\"record\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"smartAccount\",\"type\":\"address\"}],\"name\":\"findTrustedAttesters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ResolverUID\",\"name\":\"resolverUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"resolverContext\",\"type\":\"bytes\"}],\"name\":\"registerModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IExternalResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"registerResolver\",\"outputs\":[{\"internalType\":\"ResolverUID\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"schema\",\"type\":\"string\"},{\"internalType\":\"contract IExternalSchemaValidator\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"registerSchema\",\"outputs\":[{\"internalType\":\"SchemaUID\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"internalType\":\"struct RevocationRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"internalType\":\"struct RevocationRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"internalType\":\"struct RevocationRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"internalType\":\"struct RevocationRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ResolverUID\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"contract IExternalResolver\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"ResolverUID\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferResolverOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"attesters\",\"type\":\"address[]\"}],\"name\":\"trustAttesters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"rhinestone | zeroknots.eth, Konrad Kopp (@kopy-kat)\",\"kind\":\"dev\",\"methods\":{\"attest(bytes32,(address,uint48,bytes,uint256[]))\":{\"details\":\"This function will revert if the same module is attested twice by the same attester.      If you want to re-attest, you have to revoke your attestation first, and then attest again.\",\"params\":{\"request\":\"a single AttestationRequest\",\"schemaUID\":\"The SchemaUID of the schema the attestation is based on.\"}},\"attest(bytes32,(address,uint48,bytes,uint256[])[])\":{\"details\":\"This function will revert if the same module is attested twice by the same attester.      If you want to re-attest, you have to revoke your attestation first, and then attest again.\",\"params\":{\"requests\":\"An array of AttestationRequest\",\"schemaUID\":\"The SchemaUID of the schema the attestation is based on.\"}},\"attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)\":{\"details\":\"This function will revert if the same module is attested twice by the same attester.      If you want to re-attest, you have to revoke your attestation first, and then attest again.\",\"params\":{\"attester\":\"The address of the attester\",\"request\":\"An AttestationRequest\",\"schemaUID\":\"The SchemaUID of the schema the attestation is based on.\",\"signature\":\"The signature of the attester. ECDSA or ERC1271\"}},\"attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)\":{\"details\":\"This function will revert if the same module is attested twice by the same attester.      If you want to re-attest, you have to revoke your attestation first, and then attest again.\",\"params\":{\"attester\":\"The address of the attester\",\"requests\":\"An array of AttestationRequest\",\"schemaUID\":\"The SchemaUID of the schema the attestation is based on.\",\"signature\":\"The signature of the attester. ECDSA or ERC1271\"}},\"calcModuleAddress(bytes32,bytes)\":{\"params\":{\"initCode\":\"module initcode\",\"salt\":\"CREATE2 salt\"},\"returns\":{\"_0\":\"moduleAddress counterfactual address of the module deployment\"}},\"deployModule(bytes32,bytes32,bytes,bytes,bytes)\":{\"params\":{\"initCode\":\"The initCode to be used in the `CREATE2` factory\",\"metadata\":\"The metadata to be stored on the registry.            This field is optional, and might be used by the module developer to store additional            information about the module or facilitate business logic with the Resolver stub\",\"resolverContext\":\"bytes that will be passed to the resolver contract\",\"resolverUID\":\"The resolverUID to be used in the `CREATE2` factory\",\"salt\":\"The salt to be used in the `CREATE2` factory. This adheres to Pr000xy/Create2Factory.sol salt formatting.             The salt's first bytes20 should be the address of the sender             or bytes20(0) to bypass the check (this will lose replay protection)\"}},\"deployViaFactory(address,bytes,bytes,bytes32,bytes)\":{\"details\":\"Registry can use other factories to deploy the module.Note that this function will call the external factory via the FactoryTrampoline contract.           Factory MUST not assume that msg.sender == registryThis function is used to deploy and register a module using a factory contract.           Since one of the parameters of this function is a unique resolverUID and any           registered module address can only be registered once,           using this function is of risk for a frontrun attack\"},\"findModule(address)\":{\"params\":{\"moduleAddress\":\"The address of the module\"}},\"findResolver(bytes32)\":{\"params\":{\"uid\":\"The UID of the resolver.\"}},\"findTrustedAttesters(address)\":{\"params\":{\"smartAccount\":\"The address of the Smart Account\"}},\"registerModule(bytes32,address,bytes,bytes)\":{\"details\":\"This function is used to deploy and register an already deployed module.           Since one of the parameters of this function is a unique resolverUID and any           registered module address can only be registered once,           using this function is of risk for a frontrun attackthe sender address of this registration is set to address(0) since anyone can invoke this function\",\"params\":{\"metadata\":\"The metadata to be stored on the registry.            This field is optional, and might be used by the module developer to store additional            information about the module or facilitate business logic with the Resolver stub\",\"moduleAddress\":\"The address of the module to be registered\",\"resolverContext\":\"bytes that will be passed to the resolver contract\",\"resolverUID\":\"The resolverUID to be used for the module\"}},\"registerResolver(address)\":{\"params\":{\"resolver\":\"external resolver contract\"},\"returns\":{\"uid\":\"ResolverUID of the registered resolver\"}},\"registerSchema(string,address)\":{\"params\":{\"schema\":\"ABI schema used to encode attestations that are made with this schema\",\"validator\":\"(optional) external schema validator that will be used to validate attestations.                  use address(0), if you don't need an external validator\"},\"returns\":{\"uid\":\"SchemaUID of the registered schema\"}},\"revoke((address))\":{\"details\":\"this function will revert if the attestation is not foundthis function will revert if the attestation is already revoked\",\"params\":{\"request\":\"single RevocationRequest\"}},\"revoke((address)[])\":{\"details\":\"this function will revert if the attestation is not foundthis function will revert if the attestation is already revoked\",\"params\":{\"requests\":\"the RevocationRequests\"}},\"revoke(address,(address),bytes)\":{\"params\":{\"attester\":\"the signer / revoker\",\"request\":\"single RevocationRequest\",\"signature\":\"ECDSA or ERC1271 signature\"}},\"revoke(address,(address)[],bytes)\":{\"details\":\"if you want to revoke multiple attestations, but from different attesters, call this function multiple times\",\"params\":{\"attester\":\"the signer / revoker\",\"requests\":\"array of RevocationRequests\",\"signature\":\"ECDSA or ERC1271 signature\"}},\"setResolver(bytes32,address)\":{\"params\":{\"resolver\":\"The new resolver implementation address.\",\"uid\":\"The UID of the resolver.\"}},\"transferResolverOwnership(bytes32,address)\":{\"params\":{\"newOwner\":\"The address of the new owner\",\"uid\":\"The UID of the resolver to transfer ownership for\"}},\"trustAttesters(uint8,address[])\":{\"details\":\"this function reverts, if address(0), or duplicates are provided in attesters[]\",\"params\":{\"attesters\":\"The addresses of the attesters to be trusted.\",\"threshold\":\"The minimum number of attestations required for a module                  to be considered secure.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attest(bytes32,(address,uint48,bytes,uint256[]))\":{\"notice\":\"Allows `msg.sender` to attest to multiple modules' security status. The `AttestationRequest.Data` provided should match the attestation schema defined by the Schema corresponding to the SchemaUID\"},\"attest(bytes32,(address,uint48,bytes,uint256[])[])\":{\"notice\":\"Allows `msg.sender` to attest to multiple modules' security status. The `AttestationRequest.Data` provided should match the attestation schema defined by the Schema corresponding to the SchemaUID\"},\"attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)\":{\"notice\":\"Allows attester to attest by signing an `AttestationRequest` (`ECDSA` or `ERC1271`) The `AttestationRequest.Data` provided should match the attestation schema defined by the Schema corresponding to the SchemaUID\"},\"attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)\":{\"notice\":\"Allows attester to attest by signing an `AttestationRequest` (`ECDSA` or `ERC1271`) The `AttestationRequest.Data` provided should match the attestation schema defined by the Schema corresponding to the SchemaUID\"},\"calcModuleAddress(bytes32,bytes)\":{\"notice\":\"in conjunction with the deployModule() function, this function let's you predict the address of a CREATE2 module deployment\"},\"deployModule(bytes32,bytes32,bytes,bytes,bytes)\":{\"notice\":\"Module Developers can deploy their module Bytecode directly via the registry. This registry implements a `CREATE2` factory, that allows module developers to register and deploy module bytecode\"},\"deployViaFactory(address,bytes,bytes,bytes32,bytes)\":{\"notice\":\"In order to make the integration into existing business logics possible, the Registry is able to utilize external factories that can be utilized to deploy the modules.\"},\"findAttestation(address,address)\":{\"notice\":\"Getter function to get AttestationRequest made by one attester\"},\"findAttestations(address,address[])\":{\"notice\":\"Getter function to get AttestationRequest made by multiple attesters\"},\"findModule(address)\":{\"notice\":\"Getter function to get the stored ModuleRecord for a specific module address.\"},\"findResolver(bytes32)\":{\"notice\":\"Getter function to get the ResolverRecord of a registered resolver\"},\"findSchema(bytes32)\":{\"notice\":\"Getter function to retrieve SchemaRecord\"},\"findTrustedAttesters(address)\":{\"notice\":\"Get trusted attester for a specific Smart Account\"},\"registerModule(bytes32,address,bytes,bytes)\":{\"notice\":\"Already deployed module addresses can be registered on the registry\"},\"registerResolver(address)\":{\"notice\":\"Allows Marketplace Agents to register external resolvers.\"},\"registerSchema(string,address)\":{\"notice\":\"Register Schema and (optional) external `IExternalSchemaValidator` A Schema describe the structure of the data of attestations every attestation made on this registry, will reference a SchemaUID to  make it possible to decode attestation data in human readable form overwriting a schema is not allowed, and will revert\"},\"revoke((address))\":{\"notice\":\"Allows `msg.sender` to revoke an attestation made by the same `msg.sender`\"},\"revoke((address)[])\":{\"notice\":\"Allows msg.sender to revoke multiple attestation made by the same msg.sender\"},\"revoke(address,(address),bytes)\":{\"notice\":\"Allows attester to revoke an attestation by signing an `RevocationRequest` (`ECDSA` or `ERC1271`)\"},\"revoke(address,(address)[],bytes)\":{\"notice\":\"Allows attester to revoke an attestation by signing an `RevocationRequest` (`ECDSA` or `ERC1271`)\"},\"setResolver(bytes32,address)\":{\"notice\":\"Entities that previously registered an external resolver, may update the implementation address.\"},\"transferResolverOwnership(bytes32,address)\":{\"notice\":\"Transfer ownership of resolverUID to a new address\"},\"trustAttesters(uint8,address[])\":{\"notice\":\"Allows Smart Accounts - the end users of the registry - to appoint one or many attesters as trusted.\"}},\"notice\":\"Interface definition of all features of the registry:      - Register Schemas      - Register External Resolvers      - Register Modules      - Make Attestations      - Make Revocations      - Delegate Trust to Attester(s)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IRegistry.sol\":\"IRegistry\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":account-abstraction-v0.6/=node_modules/account-abstraction-v0.6/contracts/\",\":account-abstraction/=node_modules/account-abstraction/contracts/\",\":ds-test/=node_modules/ds-test/src/\",\":erc4337-validation/=node_modules/@rhinestone/erc4337-validation/src/\",\":forge-std/=node_modules/forge-std/src/\",\":safe-singleton-deployer/=node_modules/safe-singleton-deployer/src/\",\":solady/=node_modules/solady/src/\",\":solmate/=node_modules/solmate/src/\"]},\"sources\":{\"node_modules/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"src/DataTypes.sol\":{\"keccak256\":\"0x17a21d96dbda1704f888f46565731cc676d5fd4d989ea6819a87a8fb0895c47b\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://91c12e4dc5254821d3ac965369b40656242d90e098a6ecc1e721d6dcf61e64fc\",\"dweb:/ipfs/Qma78sqHvpP7AFj2gKAQe2z4Na3nxT5NRtaSuEJGezDyN8\"]},\"src/IRegistry.sol\":{\"keccak256\":\"0xb03203d856c112b1e663615484f27b7597f0ef09b573a42eb68425683a386437\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://ff723cd22c1c4f02c1be8ed6fe69531d99791cf49be95fc9429002edcec2d0f6\",\"dweb:/ipfs/QmXBuVzbS5v1TSpNo57LUgisM35KiYwQdhrKythwLmBxFQ\"]},\"src/external/IExternalResolver.sol\":{\"keccak256\":\"0x258211aa342cdcde51952e0f523136b71d320a2208a7873b03d0c6c210776d5f\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://3406f08574205e786e228c0126d06d78ffb3d8724efa6344a18675eef61e9077\",\"dweb:/ipfs/QmZTZEY5eWmBq6ho6F75UGJ7VYuh2JwJiuQfUXGPrJD7JK\"]},\"src/external/IExternalSchemaValidator.sol\":{\"keccak256\":\"0xeaefb6118769085ca0de5b3048e5b4a8f860f99d4361008b4220195f603e4bd2\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://d8a12afbc6a3a453d5810b67d775d9cb24bc52d1fc2843625910576285257526\",\"dweb:/ipfs/QmXDcULeqy7VSXitbyrYcr32Bt7msuv7krG7g5u1nuCJx2\"]},\"src/interfaces/IERC7484.sol\":{\"keccak256\":\"0xaffbc0cff08e0bd99e1d3d338829ee7b7a1fed9cb25fc949b21c150111a9084a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7860e358c9dc537250107b07821ebc5eb7fcf4b014a67100ca15957c842fca2\",\"dweb:/ipfs/QmSWjcQewHnTJDCdDdMWYBfc6tgkcX9DmkDUwsg8xNqMCF\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.25+commit.b61c2a91" },
    "language": "Solidity",
    "output": {
      "abi": [
        { "inputs": [], "type": "error", "name": "AccessDenied" },
        { "inputs": [], "type": "error", "name": "AlreadyAttested" },
        {
          "inputs": [
            { "internalType": "address", "name": "module", "type": "address" }
          ],
          "type": "error",
          "name": "AlreadyRegistered"
        },
        { "inputs": [], "type": "error", "name": "AlreadyRevoked" },
        { "inputs": [], "type": "error", "name": "AttestationNotFound" },
        { "inputs": [], "type": "error", "name": "DifferentResolvers" },
        {
          "inputs": [],
          "type": "error",
          "name": "ExternalError_ModuleRegistration"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ExternalError_ResolveAttestation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ExternalError_ResolveRevocation"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ExternalError_SchemaValidation"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "factory", "type": "address" }
          ],
          "type": "error",
          "name": "FactoryCallFailed"
        },
        { "inputs": [], "type": "error", "name": "InsufficientAttestations" },
        { "inputs": [], "type": "error", "name": "InvalidAttestation" },
        { "inputs": [], "type": "error", "name": "InvalidDeployment" },
        { "inputs": [], "type": "error", "name": "InvalidExpirationTime" },
        { "inputs": [], "type": "error", "name": "InvalidModuleType" },
        { "inputs": [], "type": "error", "name": "InvalidModuleTypes" },
        {
          "inputs": [
            {
              "internalType": "contract IExternalResolver",
              "name": "resolver",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "InvalidResolver"
        },
        {
          "inputs": [
            { "internalType": "ResolverUID", "name": "uid", "type": "bytes32" }
          ],
          "type": "error",
          "name": "InvalidResolverUID"
        },
        { "inputs": [], "type": "error", "name": "InvalidSchema" },
        {
          "inputs": [
            {
              "internalType": "contract IExternalSchemaValidator",
              "name": "validator",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "InvalidSchemaValidator"
        },
        { "inputs": [], "type": "error", "name": "InvalidSignature" },
        {
          "inputs": [],
          "type": "error",
          "name": "InvalidTrustedAttesterInput"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "ModuleAddressIsNotContract"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "module", "type": "address" }
          ],
          "type": "error",
          "name": "ModuleNotFoundInRegistry"
        },
        { "inputs": [], "type": "error", "name": "NoTrustedAttestersFound" },
        { "inputs": [], "type": "error", "name": "ResolverAlreadyExists" },
        {
          "inputs": [
            { "internalType": "address", "name": "attester", "type": "address" }
          ],
          "type": "error",
          "name": "RevokedAttestation"
        },
        {
          "inputs": [
            { "internalType": "SchemaUID", "name": "uid", "type": "bytes32" }
          ],
          "type": "error",
          "name": "SchemaAlreadyExists"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "SchemaUID",
              "name": "schemaUID",
              "type": "bytes32",
              "indexed": false
            },
            {
              "internalType": "AttestationDataRef",
              "name": "sstore2Pointer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "Attested",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "ModuleRegistration",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "ResolverUID",
              "name": "uid",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "resolver",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "NewResolver",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "ResolverUID",
              "name": "uid",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "NewResolverOwner",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "smartAccount",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "NewTrustedAttesters",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "revoker",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "SchemaUID",
              "name": "schema",
              "type": "bytes32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Revoked",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "SchemaUID",
              "name": "uid",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "registerer",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "SchemaRegistered",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "SchemaUID",
              "name": "schemaUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "struct AttestationRequest[]",
              "name": "requests",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "expirationTime",
                  "type": "uint48"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" },
                {
                  "internalType": "ModuleType[]",
                  "name": "moduleTypes",
                  "type": "uint256[]"
                }
              ]
            },
            { "internalType": "bytes", "name": "signature", "type": "bytes" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "attest"
        },
        {
          "inputs": [
            {
              "internalType": "SchemaUID",
              "name": "schemaUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "struct AttestationRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "expirationTime",
                  "type": "uint48"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" },
                {
                  "internalType": "ModuleType[]",
                  "name": "moduleTypes",
                  "type": "uint256[]"
                }
              ]
            },
            { "internalType": "bytes", "name": "signature", "type": "bytes" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "attest"
        },
        {
          "inputs": [
            {
              "internalType": "SchemaUID",
              "name": "schemaUID",
              "type": "bytes32"
            },
            {
              "internalType": "struct AttestationRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "expirationTime",
                  "type": "uint48"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" },
                {
                  "internalType": "ModuleType[]",
                  "name": "moduleTypes",
                  "type": "uint256[]"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "attest"
        },
        {
          "inputs": [
            {
              "internalType": "SchemaUID",
              "name": "schemaUID",
              "type": "bytes32"
            },
            {
              "internalType": "struct AttestationRequest[]",
              "name": "requests",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint48",
                  "name": "expirationTime",
                  "type": "uint48"
                },
                { "internalType": "bytes", "name": "data", "type": "bytes" },
                {
                  "internalType": "ModuleType[]",
                  "name": "moduleTypes",
                  "type": "uint256[]"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "attest"
        },
        {
          "inputs": [
            { "internalType": "bytes32", "name": "salt", "type": "bytes32" },
            { "internalType": "bytes", "name": "initCode", "type": "bytes" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "calcModuleAddress",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "module", "type": "address" },
            {
              "internalType": "address[]",
              "name": "attesters",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "check"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "module", "type": "address" },
            {
              "internalType": "ModuleType",
              "name": "moduleType",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "attesters",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "threshold",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "check"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "module", "type": "address" },
            {
              "internalType": "ModuleType",
              "name": "moduleType",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "check"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "module", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "check"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "smartAccount",
              "type": "address"
            },
            { "internalType": "address", "name": "module", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkForAccount"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "smartAccount",
              "type": "address"
            },
            { "internalType": "address", "name": "module", "type": "address" },
            {
              "internalType": "ModuleType",
              "name": "moduleType",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "checkForAccount"
        },
        {
          "inputs": [
            { "internalType": "bytes32", "name": "salt", "type": "bytes32" },
            {
              "internalType": "ResolverUID",
              "name": "resolverUID",
              "type": "bytes32"
            },
            { "internalType": "bytes", "name": "initCode", "type": "bytes" },
            { "internalType": "bytes", "name": "metadata", "type": "bytes" },
            {
              "internalType": "bytes",
              "name": "resolverContext",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "deployModule",
          "outputs": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "factory", "type": "address" },
            {
              "internalType": "bytes",
              "name": "callOnFactory",
              "type": "bytes"
            },
            { "internalType": "bytes", "name": "metadata", "type": "bytes" },
            {
              "internalType": "ResolverUID",
              "name": "resolverUID",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "resolverContext",
              "type": "bytes"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "deployViaFactory",
          "outputs": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "module", "type": "address" },
            { "internalType": "address", "name": "attester", "type": "address" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "findAttestation",
          "outputs": [
            {
              "internalType": "struct AttestationRecord",
              "name": "attestation",
              "type": "tuple",
              "components": [
                { "internalType": "uint48", "name": "time", "type": "uint48" },
                {
                  "internalType": "uint48",
                  "name": "expirationTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint48",
                  "name": "revocationTime",
                  "type": "uint48"
                },
                {
                  "internalType": "PackedModuleTypes",
                  "name": "moduleTypes",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "AttestationDataRef",
                  "name": "dataPointer",
                  "type": "address"
                },
                {
                  "internalType": "SchemaUID",
                  "name": "schemaUID",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "module", "type": "address" },
            {
              "internalType": "address[]",
              "name": "attesters",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "findAttestations",
          "outputs": [
            {
              "internalType": "struct AttestationRecord[]",
              "name": "attestations",
              "type": "tuple[]",
              "components": [
                { "internalType": "uint48", "name": "time", "type": "uint48" },
                {
                  "internalType": "uint48",
                  "name": "expirationTime",
                  "type": "uint48"
                },
                {
                  "internalType": "uint48",
                  "name": "revocationTime",
                  "type": "uint48"
                },
                {
                  "internalType": "PackedModuleTypes",
                  "name": "moduleTypes",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "attester",
                  "type": "address"
                },
                {
                  "internalType": "AttestationDataRef",
                  "name": "dataPointer",
                  "type": "address"
                },
                {
                  "internalType": "SchemaUID",
                  "name": "schemaUID",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "findModule",
          "outputs": [
            {
              "internalType": "struct ModuleRecord",
              "name": "moduleRecord",
              "type": "tuple",
              "components": [
                {
                  "internalType": "ResolverUID",
                  "name": "resolverUID",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                { "internalType": "bytes", "name": "metadata", "type": "bytes" }
              ]
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "ResolverUID", "name": "uid", "type": "bytes32" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "findResolver",
          "outputs": [
            {
              "internalType": "struct ResolverRecord",
              "name": "record",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IExternalResolver",
                  "name": "resolver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "resolverOwner",
                  "type": "address"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "SchemaUID", "name": "uid", "type": "bytes32" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "findSchema",
          "outputs": [
            {
              "internalType": "struct SchemaRecord",
              "name": "record",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint48",
                  "name": "registeredAt",
                  "type": "uint48"
                },
                {
                  "internalType": "contract IExternalSchemaValidator",
                  "name": "validator",
                  "type": "address"
                },
                { "internalType": "string", "name": "schema", "type": "string" }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "smartAccount",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "findTrustedAttesters",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "attesters",
              "type": "address[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "ResolverUID",
              "name": "resolverUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "moduleAddress",
              "type": "address"
            },
            { "internalType": "bytes", "name": "metadata", "type": "bytes" },
            {
              "internalType": "bytes",
              "name": "resolverContext",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerModule"
        },
        {
          "inputs": [
            {
              "internalType": "contract IExternalResolver",
              "name": "resolver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerResolver",
          "outputs": [
            { "internalType": "ResolverUID", "name": "uid", "type": "bytes32" }
          ]
        },
        {
          "inputs": [
            { "internalType": "string", "name": "schema", "type": "string" },
            {
              "internalType": "contract IExternalSchemaValidator",
              "name": "validator",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerSchema",
          "outputs": [
            { "internalType": "SchemaUID", "name": "uid", "type": "bytes32" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct RevocationRequest[]",
              "name": "requests",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revoke"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "struct RevocationRequest[]",
              "name": "requests",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                }
              ]
            },
            { "internalType": "bytes", "name": "signature", "type": "bytes" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revoke"
        },
        {
          "inputs": [
            {
              "internalType": "struct RevocationRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revoke"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "struct RevocationRequest",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "address",
                  "name": "moduleAddress",
                  "type": "address"
                }
              ]
            },
            { "internalType": "bytes", "name": "signature", "type": "bytes" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revoke"
        },
        {
          "inputs": [
            { "internalType": "ResolverUID", "name": "uid", "type": "bytes32" },
            {
              "internalType": "contract IExternalResolver",
              "name": "resolver",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setResolver"
        },
        {
          "inputs": [
            { "internalType": "ResolverUID", "name": "uid", "type": "bytes32" },
            { "internalType": "address", "name": "newOwner", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferResolverOwnership"
        },
        {
          "inputs": [
            { "internalType": "uint8", "name": "threshold", "type": "uint8" },
            {
              "internalType": "address[]",
              "name": "attesters",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "trustAttesters"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "attest(bytes32,(address,uint48,bytes,uint256[]))": {
            "details": "This function will revert if the same module is attested twice by the same attester.      If you want to re-attest, you have to revoke your attestation first, and then attest again.",
            "params": {
              "request": "a single AttestationRequest",
              "schemaUID": "The SchemaUID of the schema the attestation is based on."
            }
          },
          "attest(bytes32,(address,uint48,bytes,uint256[])[])": {
            "details": "This function will revert if the same module is attested twice by the same attester.      If you want to re-attest, you have to revoke your attestation first, and then attest again.",
            "params": {
              "requests": "An array of AttestationRequest",
              "schemaUID": "The SchemaUID of the schema the attestation is based on."
            }
          },
          "attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)": {
            "details": "This function will revert if the same module is attested twice by the same attester.      If you want to re-attest, you have to revoke your attestation first, and then attest again.",
            "params": {
              "attester": "The address of the attester",
              "request": "An AttestationRequest",
              "schemaUID": "The SchemaUID of the schema the attestation is based on.",
              "signature": "The signature of the attester. ECDSA or ERC1271"
            }
          },
          "attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)": {
            "details": "This function will revert if the same module is attested twice by the same attester.      If you want to re-attest, you have to revoke your attestation first, and then attest again.",
            "params": {
              "attester": "The address of the attester",
              "requests": "An array of AttestationRequest",
              "schemaUID": "The SchemaUID of the schema the attestation is based on.",
              "signature": "The signature of the attester. ECDSA or ERC1271"
            }
          },
          "calcModuleAddress(bytes32,bytes)": {
            "params": { "initCode": "module initcode", "salt": "CREATE2 salt" },
            "returns": {
              "_0": "moduleAddress counterfactual address of the module deployment"
            }
          },
          "deployModule(bytes32,bytes32,bytes,bytes,bytes)": {
            "params": {
              "initCode": "The initCode to be used in the `CREATE2` factory",
              "metadata": "The metadata to be stored on the registry.            This field is optional, and might be used by the module developer to store additional            information about the module or facilitate business logic with the Resolver stub",
              "resolverContext": "bytes that will be passed to the resolver contract",
              "resolverUID": "The resolverUID to be used in the `CREATE2` factory",
              "salt": "The salt to be used in the `CREATE2` factory. This adheres to Pr000xy/Create2Factory.sol salt formatting.             The salt's first bytes20 should be the address of the sender             or bytes20(0) to bypass the check (this will lose replay protection)"
            }
          },
          "deployViaFactory(address,bytes,bytes,bytes32,bytes)": {
            "details": "Registry can use other factories to deploy the module.Note that this function will call the external factory via the FactoryTrampoline contract.           Factory MUST not assume that msg.sender == registryThis function is used to deploy and register a module using a factory contract.           Since one of the parameters of this function is a unique resolverUID and any           registered module address can only be registered once,           using this function is of risk for a frontrun attack"
          },
          "findModule(address)": {
            "params": { "moduleAddress": "The address of the module" }
          },
          "findResolver(bytes32)": {
            "params": { "uid": "The UID of the resolver." }
          },
          "findTrustedAttesters(address)": {
            "params": { "smartAccount": "The address of the Smart Account" }
          },
          "registerModule(bytes32,address,bytes,bytes)": {
            "details": "This function is used to deploy and register an already deployed module.           Since one of the parameters of this function is a unique resolverUID and any           registered module address can only be registered once,           using this function is of risk for a frontrun attackthe sender address of this registration is set to address(0) since anyone can invoke this function",
            "params": {
              "metadata": "The metadata to be stored on the registry.            This field is optional, and might be used by the module developer to store additional            information about the module or facilitate business logic with the Resolver stub",
              "moduleAddress": "The address of the module to be registered",
              "resolverContext": "bytes that will be passed to the resolver contract",
              "resolverUID": "The resolverUID to be used for the module"
            }
          },
          "registerResolver(address)": {
            "params": { "resolver": "external resolver contract" },
            "returns": { "uid": "ResolverUID of the registered resolver" }
          },
          "registerSchema(string,address)": {
            "params": {
              "schema": "ABI schema used to encode attestations that are made with this schema",
              "validator": "(optional) external schema validator that will be used to validate attestations.                  use address(0), if you don't need an external validator"
            },
            "returns": { "uid": "SchemaUID of the registered schema" }
          },
          "revoke((address))": {
            "details": "this function will revert if the attestation is not foundthis function will revert if the attestation is already revoked",
            "params": { "request": "single RevocationRequest" }
          },
          "revoke((address)[])": {
            "details": "this function will revert if the attestation is not foundthis function will revert if the attestation is already revoked",
            "params": { "requests": "the RevocationRequests" }
          },
          "revoke(address,(address),bytes)": {
            "params": {
              "attester": "the signer / revoker",
              "request": "single RevocationRequest",
              "signature": "ECDSA or ERC1271 signature"
            }
          },
          "revoke(address,(address)[],bytes)": {
            "details": "if you want to revoke multiple attestations, but from different attesters, call this function multiple times",
            "params": {
              "attester": "the signer / revoker",
              "requests": "array of RevocationRequests",
              "signature": "ECDSA or ERC1271 signature"
            }
          },
          "setResolver(bytes32,address)": {
            "params": {
              "resolver": "The new resolver implementation address.",
              "uid": "The UID of the resolver."
            }
          },
          "transferResolverOwnership(bytes32,address)": {
            "params": {
              "newOwner": "The address of the new owner",
              "uid": "The UID of the resolver to transfer ownership for"
            }
          },
          "trustAttesters(uint8,address[])": {
            "details": "this function reverts, if address(0), or duplicates are provided in attesters[]",
            "params": {
              "attesters": "The addresses of the attesters to be trusted.",
              "threshold": "The minimum number of attestations required for a module                  to be considered secure."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "attest(bytes32,(address,uint48,bytes,uint256[]))": {
            "notice": "Allows `msg.sender` to attest to multiple modules' security status. The `AttestationRequest.Data` provided should match the attestation schema defined by the Schema corresponding to the SchemaUID"
          },
          "attest(bytes32,(address,uint48,bytes,uint256[])[])": {
            "notice": "Allows `msg.sender` to attest to multiple modules' security status. The `AttestationRequest.Data` provided should match the attestation schema defined by the Schema corresponding to the SchemaUID"
          },
          "attest(bytes32,address,(address,uint48,bytes,uint256[]),bytes)": {
            "notice": "Allows attester to attest by signing an `AttestationRequest` (`ECDSA` or `ERC1271`) The `AttestationRequest.Data` provided should match the attestation schema defined by the Schema corresponding to the SchemaUID"
          },
          "attest(bytes32,address,(address,uint48,bytes,uint256[])[],bytes)": {
            "notice": "Allows attester to attest by signing an `AttestationRequest` (`ECDSA` or `ERC1271`) The `AttestationRequest.Data` provided should match the attestation schema defined by the Schema corresponding to the SchemaUID"
          },
          "calcModuleAddress(bytes32,bytes)": {
            "notice": "in conjunction with the deployModule() function, this function let's you predict the address of a CREATE2 module deployment"
          },
          "deployModule(bytes32,bytes32,bytes,bytes,bytes)": {
            "notice": "Module Developers can deploy their module Bytecode directly via the registry. This registry implements a `CREATE2` factory, that allows module developers to register and deploy module bytecode"
          },
          "deployViaFactory(address,bytes,bytes,bytes32,bytes)": {
            "notice": "In order to make the integration into existing business logics possible, the Registry is able to utilize external factories that can be utilized to deploy the modules."
          },
          "findAttestation(address,address)": {
            "notice": "Getter function to get AttestationRequest made by one attester"
          },
          "findAttestations(address,address[])": {
            "notice": "Getter function to get AttestationRequest made by multiple attesters"
          },
          "findModule(address)": {
            "notice": "Getter function to get the stored ModuleRecord for a specific module address."
          },
          "findResolver(bytes32)": {
            "notice": "Getter function to get the ResolverRecord of a registered resolver"
          },
          "findSchema(bytes32)": {
            "notice": "Getter function to retrieve SchemaRecord"
          },
          "findTrustedAttesters(address)": {
            "notice": "Get trusted attester for a specific Smart Account"
          },
          "registerModule(bytes32,address,bytes,bytes)": {
            "notice": "Already deployed module addresses can be registered on the registry"
          },
          "registerResolver(address)": {
            "notice": "Allows Marketplace Agents to register external resolvers."
          },
          "registerSchema(string,address)": {
            "notice": "Register Schema and (optional) external `IExternalSchemaValidator` A Schema describe the structure of the data of attestations every attestation made on this registry, will reference a SchemaUID to  make it possible to decode attestation data in human readable form overwriting a schema is not allowed, and will revert"
          },
          "revoke((address))": {
            "notice": "Allows `msg.sender` to revoke an attestation made by the same `msg.sender`"
          },
          "revoke((address)[])": {
            "notice": "Allows msg.sender to revoke multiple attestation made by the same msg.sender"
          },
          "revoke(address,(address),bytes)": {
            "notice": "Allows attester to revoke an attestation by signing an `RevocationRequest` (`ECDSA` or `ERC1271`)"
          },
          "revoke(address,(address)[],bytes)": {
            "notice": "Allows attester to revoke an attestation by signing an `RevocationRequest` (`ECDSA` or `ERC1271`)"
          },
          "setResolver(bytes32,address)": {
            "notice": "Entities that previously registered an external resolver, may update the implementation address."
          },
          "transferResolverOwnership(bytes32,address)": {
            "notice": "Transfer ownership of resolverUID to a new address"
          },
          "trustAttesters(uint8,address[])": {
            "notice": "Allows Smart Accounts - the end users of the registry - to appoint one or many attesters as trusted."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "account-abstraction-v0.6/=node_modules/account-abstraction-v0.6/contracts/",
        "account-abstraction/=node_modules/account-abstraction/contracts/",
        "ds-test/=node_modules/ds-test/src/",
        "erc4337-validation/=node_modules/@rhinestone/erc4337-validation/src/",
        "forge-std/=node_modules/forge-std/src/",
        "safe-singleton-deployer/=node_modules/safe-singleton-deployer/src/",
        "solady/=node_modules/solady/src/",
        "solmate/=node_modules/solmate/src/"
      ],
      "optimizer": { "enabled": true, "runs": 200 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": { "src/IRegistry.sol": "IRegistry" },
      "evmVersion": "cancun",
      "libraries": {}
    },
    "sources": {
      "node_modules/forge-std/src/interfaces/IERC165.sol": {
        "keccak256": "0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600",
        "urls": [
          "bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc",
          "dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT"
        ],
        "license": "MIT"
      },
      "src/DataTypes.sol": {
        "keccak256": "0x17a21d96dbda1704f888f46565731cc676d5fd4d989ea6819a87a8fb0895c47b",
        "urls": [
          "bzz-raw://91c12e4dc5254821d3ac965369b40656242d90e098a6ecc1e721d6dcf61e64fc",
          "dweb:/ipfs/Qma78sqHvpP7AFj2gKAQe2z4Na3nxT5NRtaSuEJGezDyN8"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/IRegistry.sol": {
        "keccak256": "0xb03203d856c112b1e663615484f27b7597f0ef09b573a42eb68425683a386437",
        "urls": [
          "bzz-raw://ff723cd22c1c4f02c1be8ed6fe69531d99791cf49be95fc9429002edcec2d0f6",
          "dweb:/ipfs/QmXBuVzbS5v1TSpNo57LUgisM35KiYwQdhrKythwLmBxFQ"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/external/IExternalResolver.sol": {
        "keccak256": "0x258211aa342cdcde51952e0f523136b71d320a2208a7873b03d0c6c210776d5f",
        "urls": [
          "bzz-raw://3406f08574205e786e228c0126d06d78ffb3d8724efa6344a18675eef61e9077",
          "dweb:/ipfs/QmZTZEY5eWmBq6ho6F75UGJ7VYuh2JwJiuQfUXGPrJD7JK"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/external/IExternalSchemaValidator.sol": {
        "keccak256": "0xeaefb6118769085ca0de5b3048e5b4a8f860f99d4361008b4220195f603e4bd2",
        "urls": [
          "bzz-raw://d8a12afbc6a3a453d5810b67d775d9cb24bc52d1fc2843625910576285257526",
          "dweb:/ipfs/QmXDcULeqy7VSXitbyrYcr32Bt7msuv7krG7g5u1nuCJx2"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/interfaces/IERC7484.sol": {
        "keccak256": "0xaffbc0cff08e0bd99e1d3d338829ee7b7a1fed9cb25fc949b21c150111a9084a",
        "urls": [
          "bzz-raw://f7860e358c9dc537250107b07821ebc5eb7fcf4b014a67100ca15957c842fca2",
          "dweb:/ipfs/QmSWjcQewHnTJDCdDdMWYBfc6tgkcX9DmkDUwsg8xNqMCF"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "id": 77
}
